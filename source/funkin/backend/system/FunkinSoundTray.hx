package funkin.backend.system; // This whole code is created by MoonlightCatalyst - PaigeFNF
 
 import openfl.display.Sprite;
 import flixel.system.FlxAssets;
 
 class FunkinSoundTray extends Sprite // Generated by Online Haxe Code Generator bcs i suck ass on this Class | Very Edited to make it look like base game
 {    
     var volumeImages = [
         'volumebox',
         'bars_0',
         'bars_1',
         'bars_2',
         'bars_3',
         'bars_4',
         'bars_5',
         'bars_6',
         'bars_7',
         'bars_8',
         'bars_9',
         'bars_10'
     ];
     var trayScale = 0.5; // Idk why Base Game Sound Tray images are so big...
 
     var makeTray = true;
     public function new()
     {
         super();
 
         // Image Checker bcs if it fails, it gives Null Object.
         for(i in 0...volumeImages.length)
         {
             if (!Paths.fileExists('images/ui/soundTray/${volumeImages[i]}.png', IMAGE, false)) {
                 makeTray = false;
                 trace('images/ui/soundTray/${volumeImages[i]}.png was not Found.');
             }
         }
         if(makeTray) createTray();
     }
 
     var fill:Sprite;
     var bgImage = null;
     var fillImage = null;
 
     public var controls:Controls;
     static var isMuted:Bool = false;
     private function createTray():Void
     {
         controls = Controls.instance; // Custom | Thank you Larry for Telling me this Thing
         FlxG.sound.soundTrayEnabled = false; // Custom | flixel.system.ui.FlxSoundTray - flixel.system.frontEnds.SoundFrontEnd
         isMuted = FlxG.sound.muted;
         
         var background:Sprite = new Sprite();
         if(bgImage == null) bgImage = Paths.image('ui/soundTray/${volumeImages[0]}', false);
         background.graphics.beginBitmapFill(bgImage.bitmap, null, false);
         background.graphics.drawRect(0, 0, bgImage.width, bgImage.height);
         background.graphics.endFill();
         addChild(background);
 
         fill = new Sprite();
         addChild(fill);
 
         // This is just to center the bar to the background
         if(fillImage == null) fillImage = Paths.image('ui/soundTray/${volumeImages[volumeImages.length-1]}', false);
         fill.x = (bgImage.width - fillImage.width) / 2;
         fill.y = (bgImage.height - fillImage.height) - 70;
 
         updateFill(); // Update Fill to Current Volume
         y = -height; // Hides the SoundTray
     }
 
     private function updateFill():Void
     {
         var curVolume = Math.round(FlxG.sound.volume * 10);
         var number = !isMuted ? curVolume : 0;
         fillImage = Paths.image('ui/soundTray/${volumeImages[1+number]}', false); // if you have more than 1 image for a background, change the 1 for the background images you wanna use
 
         fill.graphics.clear();
         fill.graphics.beginBitmapFill(fillImage.bitmap, null, false);
         fill.graphics.drawRect(0, 0, fillImage.width, fillImage.height);
         fill.graphics.endFill();
 
         FlxG.save.data.volume = curVolume / 10;
         FlxG.save.flush();
     }
     
     var stayTime:Float = 0;
     private override function __enterFrame(deltaTime:Float):Void
     {
         if(!makeTray) return;
         scaleX = trayScale;
         scaleY = trayScale;
         x = FlxG.stage.window.width / 2 - width/2; // Center X that SoundTray, is in __enterFrame in case people scale the windows.
         
         var sound = null;
         if (controls.justPressed('volume_up'))
         {
             isMuted = false;
             sound = Paths.sound("soundtray/Volup");
             if (sound != null) FlxG.sound.load(sound).play();
         }
         else if (controls.justPressed('volume_down'))
         {
             isMuted = false;
             sound = Paths.sound("soundtray/Voldown");
             if (sound != null) FlxG.sound.load(sound).play();
         }
         else if (controls.justPressed('volume_mute'))
         {
            isMuted = !isMuted;
         }
 
         var elapsed = deltaTime / 1000;
         if (controls.justPressed('volume_up') || controls.justPressed('volume_down') || controls.justPressed('volume_mute')) {
             stayTime = 3; // How Long you want the SoundTray to stay visible
         }
 
         if(stayTime > 0) { // When you Press Any Volume Key
             stayTime = Math.max(stayTime - elapsed, 0);
             updateFill(); // I know this looks dumb but i seriously cannot get it sync without doing this shit...
             y = 10; 
         } else if(y > -height) {
             y -= FlxG.height * 1.2 * elapsed; // "Tween" that hides the SoundTray offscreen
         }
     }
 }